CREATE DATABASE ZOMATO_DATA;
USE ZOMATO_DATA;

CREATE TABLE IF NOT EXISTS ZOMATO (
RESTAURANTID INTEGER,
RESTAURANT_NAME VARCHAR(1000),
COUNTRYCODE INT,
CITY VARCHAR(100),
ADDRESS VARCHAR(4000),
LOCALITY VARCHAR(250),
LOCALITYVERBOSE VARCHAR(800),
LONGITUDE DECIMAL(50,10),
LATITUDE DECIMAL(50,10),
CUISINES VARCHAR(750),
CURRENCY VARCHAR(50),
HAS_TABLE_BOOKING VARCHAR(100),
HAS_ONLINE_DELIVERY VARCHAR(100),
IS_DELIVERING_NOW VARCHAR(100),
SWITCH_TO_ORDER_MENU VARCHAR(100),
PRICE_RANGE INT,
VOTES INT,
AVERAGE_COST_FOR_TWO INT,
RATING INT,
DATEKEY_OPENING DATE,
CUISINES1 VARCHAR(100),
CUISINES2 VARCHAR(100),
CUISINES3 VARCHAR(100),
CUISINES4 VARCHAR(100),
CUISINES5 VARCHAR(100),
CUISINES6 VARCHAR(100),
CUISINES7 VARCHAR(100),
CUISINES8 VARCHAR(100))
PARTITION BY HASH(AVERAGE_COST_FOR_TWO)
PARTITIONS 20;

DROP TABLE ZOMATO;

LOAD DATA INFILE
'E:/zomato1.csv'
INTO TABLE ZOMATO
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

DROP TABLE ZOMATO;
SELECT * FROM ZOMATO;

CREATE TABLE IF NOT EXISTS COUNTRY (
COUNTRYID INT,
COUNTRY_NAME VARCHAR(100));

LOAD DATA INFILE
'E:/zomato2.csv'
INTO TABLE COUNTRY
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

DROP TABLE COUNTRY;
SELECT * FROM COUNTRY;

/* Q-1 Build a country Map Table */

/* Q-2 Build a Calendar Table using the Column Datekey, Add all the below Columns in the Calendar Table using the Formulas.
   A.Year
   B.Monthno
   C.Monthfullname
   D.Quarter(Q1,Q2,Q3,Q4)
   E. YearMonth ( YYYY-MMM)
   F. Weekdayno
   G.Weekdayname
   H.FinancialMOnth ( April = FM1, May= FM2  â€¦. March = FM12)
   I. Financial Quarter ( Quarters based on Financial Month) */
   
   
/* Q-3 Find the Numbers of Restaurants based on City and Country */
SELECT COUNT(ZOMATO.RESTAURANT_NAME) AS NUMBER_OF_RESTAURANTS, ZOMATO.RESTAURANT_NAME, ZOMATO.CITY, COUNTRY.COUNTRY_NAME FROM ZOMATO 
JOIN COUNTRY ON ZOMATO.COUNTRYCODE = COUNTRY.COUNTRYID GROUP BY ZOMATO.RESTAURANT_NAME, ZOMATO.CITY, COUNTRY.COUNTRY_NAME ORDER BY NUMBER_OF_RESTAURANTS; /* Answer is ok */
/* Q-4 Numbers of Restaurants opening based on Year , Quarter , Month */
ALTER TABLE ZOMATO
ADD COLUMN `YEAR` INT NOT NULL AFTER DATEKEY_OPENING;
UPDATE ZOMATO
SET `YEAR` = YEAR(DATEKEY_OPENING);
ALTER TABLE ZOMATO
ADD COLUMN `MONTH` INT NOT NULL AFTER `YEAR`;
UPDATE ZOMATO
SET `MONTH` = MONTH(DATEKEY_OPENING);
ALTER TABLE ZOMATO
ADD COLUMN `QUARTER` INT NOT NULL AFTER `MONTH`;
UPDATE ZOMATO
SET `QUARTER` = QUARTER(DATEKEY_OPENING);
SELECT * FROM ZOMATO;
SELECT RESTAURANT_NAME, `YEAR`, `QUARTER`, `MONTH`, COUNT(RESTAURANT_NAME) AS NUMBER_OF_RESTAURANTS FROM ZOMATO
GROUP BY RESTAURANT_NAME, `YEAR`, `QUARTER`, `MONTH` ORDER BY NUMBER_OF_RESTAURANTS;
/* Q-5 Count of Restaurants based on Average Ratings */
SELECT RESTAURANTID, RESTAURANT_NAME, CITY, ADDRESS, RATING, COUNT(RESTAURANT_NAME) AS COUNT_OF_RESTAURANTS, ROUND(AVG(RATING), 2) AS AVERAGE_RATINGS FROM ZOMATO 
GROUP BY RESTAURANTID, RESTAURANT_NAME, CITY, ADDRESS, RATING ORDER BY COUNT_OF_RESTAURANTS, AVERAGE_RATINGS; /* Answer is ok */
/* Q-6 Create buckets based on Average Price of reasonable size and find out how many restaurants falls in each buckets */
SELECT * FROM ZOMATO;
SELECT RESTAURANT_NAME, CITY, ADDRESS, LOCALITY, AVERAGE_COST_FOR_TWO, RATING, COUNT(DISTINCT RESTAURANT_NAME) AS NUMBER_OF_RESTAURANTS,
PARTITION_NAME, TABLE_NAME, TABLE_ROWS FROM ZOMATO, INFORMATION_SCHEMA.PARTITIONS
WHERE TABLE_NAME = 'ZOMATO'GROUP BY RESTAURANT_NAME, CITY, ADDRESS, LOCALITY, AVERAGE_COST_FOR_TWO, RATING, PARTITION_NAME, TABLE_NAME, TABLE_ROWS
ORDER BY NUMBER_OF_RESTAURANTS;

SELECT RESTAURANT_NAME, CITY, ADDRESS, LOCALITY, AVERAGE_COST_FOR_TWO, RATING, COUNT(DISTINCT RESTAURANT_NAME) AS NUMBER_OF_RESTAURANTS, NTILE(20) OVER
(PARTITION BY AVERAGE_COST_FOR_TWO) AS NTILEGROUP FROM ZOMATO GROUP BY  RESTAURANT_NAME, CITY, ADDRESS, LOCALITY, AVERAGE_COST_FOR_TWO, RATING ORDER BY NUMBER_OF_RESTAURANTS;

SELECT *, (CASE
WHEN AVERAGE_COST_FOR_TWO BETWEEN 0 AND 500 THEN "Very Low"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 500 AND 1000 THEN "Moderate Low"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 1000 AND 1500 THEN "high in low"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 1500 AND 2000 THEN "Medium"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 2000 AND 2500 THEN "low in Medium"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 2500 AND 3000 THEN "medium in Medium"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 3000 AND 3500 THEN "high in Medium"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 3500 AND 4000 THEN "High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 4000 AND 4500 THEN "low in High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 4500 AND 5000 THEN "medium in High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 5000 AND 5500 THEN "high in High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 5500 AND 6500 THEN "Very High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 6500 AND 7000 THEN "Low in Very High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 7000 AND 8000 THEN "medium in Very High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 70000 AND 120000 THEN "high in Very High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 120000 AND 200000 THEN "Highest"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 200000 AND 300000 THEN "low in Highest"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 300000 AND 400000 THEN "medium in Highest"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 400000 AND 500000 THEN "high in Highest"
ELSE "MIND BLOWING"
END) AS AVERAGE_PRICE_OF_RESONABLE_SIZE
FROM ZOMATO;

ALTER TABLE ZOMATO ADD COLUMN RATINGS VARCHAR(100);

UPDATE ZOMATO
SET RATINGS = (
CASE
WHEN AVERAGE_COST_FOR_TWO BETWEEN 0 AND 500 THEN "Very Low"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 500 AND 1000 THEN "Moderate Low"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 1000 AND 1500 THEN "high in low"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 1500 AND 2000 THEN "Medium"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 2000 AND 2500 THEN "low in Medium"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 2500 AND 3000 THEN "medium in Medium"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 3000 AND 3500 THEN "high in Medium"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 3500 AND 4000 THEN "High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 4000 AND 4500 THEN "low in High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 4500 AND 5000 THEN "medium in High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 5000 AND 5500 THEN "high in High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 5500 AND 6500 THEN "Very High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 6500 AND 7000 THEN "Low in Very High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 7000 AND 8000 THEN "medium in Very High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 70000 AND 120000 THEN "high in Very High"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 120000 AND 200000 THEN "Highest"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 200000 AND 300000 THEN "low in Highest"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 300000 AND 400000 THEN "medium in Highest"
WHEN AVERAGE_COST_FOR_TWO BETWEEN 400000 AND 500000 THEN "high in Highest"
ELSE "MIND BLOWING"
END);
SELECT * FROM ZOMATO;
SELECT RESTAURANT_NAME, CITY, AVERAGE_COST_FOR_TWO, RATINGS, COUNT(DISTINCT RESTAURANT_NAME) AS NUMBER_OF_RESTAURANTS FROM ZOMATO
GROUP BY RESTAURANT_NAME, CITY, AVERAGE_COST_FOR_TWO, RATINGS ORDER BY NUMBER_OF_RESTAURANTS;
SELECT DISTINCT RESTAURANT_NAME, AVERAGE_COST_FOR_TWO, RATINGS FROM ZOMATO;
/* Q-7 Percentage of Restaurants based on "Has_Table_booking" */
SELECT DISTINCT HAS_TABLE_BOOKING, RESTAURANT_NAME, (COUNT(RESTAURANT_NAME)/(SELECT COUNT(RESTAURANT_NAME) FROM ZOMATO) * 100) AS PERCENTAGE_OF_RESTAURANTS
FROM ZOMATO GROUP BY RESTAURANT_NAME, HAS_TABLE_BOOKING ORDER BY PERCENTAGE_OF_RESTAURANTS;
SELECT DISTINCT HAS_TABLE_BOOKING, (COUNT(RESTAURANT_NAME)/(SELECT COUNT(RESTAURANT_NAME) FROM ZOMATO) * 100) AS PERCENTAGE_OF_RESTAURANTS
FROM ZOMATO GROUP BY HAS_TABLE_BOOKING ORDER BY PERCENTAGE_OF_RESTAURANTS; /* Answer is ok */
/* Q-8 Percentage of Restaurants based on "Has_Online_delivery" */
SELECT DISTINCT HAS_ONLINE_DELIVERY, RESTAURANT_NAME, (COUNT(RESTAURANT_NAME)/(SELECT COUNT(RESTAURANT_NAME) FROM ZOMATO) * 100) AS PERCENTAGE_OF_RESTAURANTS
FROM ZOMATO GROUP BY RESTAURANT_NAME, HAS_ONLINE_DELIVERY ORDER BY PERCENTAGE_OF_RESTAURANTS;
SELECT DISTINCT HAS_ONLINE_DELIVERY, (COUNT(RESTAURANT_NAME)/(SELECT COUNT(RESTAURANT_NAME) FROM ZOMATO) * 100) AS PERCENTAGE_OF_RESTAURANTS
FROM ZOMATO GROUP BY HAS_ONLINE_DELIVERY ORDER BY PERCENTAGE_OF_RESTAURANTS; /* Answer is ok */
/* Q-9 Develop Charts based on Cuisines, City, Ratings */


